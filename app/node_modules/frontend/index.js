//updates the spans contained in the center pane
//  - adds the spans on first run
//  - hides/unhides spans thereafter
function UpdateShownCollection(ev) {
    //if the object is null, attempt to get it again
    if (cardCollection == null) {
        cardCollection = document.getElementById("CardCollection");
    }
    //if the object is null, attempt to get it again
    if (ft == null) {
        ft = document.getElementById("CardFilter");
    }

    //gets the filter text to a lowercase string
    var filterText = ft.value.toString().toLowerCase();
    while (filterText.startsWith("0"))
        filterText = filterText.substring(1);
    //if the cardCollection exists
    if (cardCollection != null) {
        //weird bug where there's a text object in the collection, should only ever contain #span
        if (cardCollection.childNodes[0] != null && cardCollection.childNodes[0].nodeName == "#text") {
            cardCollection.removeChild(cardCollection.childNodes[0]);
        }

        //iterate through all the items in the collection
        for (var i = 0; i < cardCollection.childElementCount; i++) {
            //gets the span at index i
            var childNode = cardCollection.childNodes[i];

            if (childNode.style.display == "none")
                continue;

            var isInt = !isNaN(parseInt(filterText));

            if (filterText != "") {
                childNode.style.display = "none"; //hides the span
            }
        }
    }

    var loop = function (childNode) {
        if (filterText == "" || ( //if filter text is empty
            (!isInt && (
                    (childNode.name != null && childNode.name.toLowerCase().includes(filterText)) //Check name isn't null, the filter isn't pure numbers & doesn't include filter text
                    || (childNode.cardType != null && extensions.GetCardType(childNode.cardType).toLowerCase() == filterText) //Check cardType isn't null & the string version isn't equal to filter text
                )
                || (isInt && (childNode.number != null && childNode.number.toString().toLowerCase().includes(filterText))) //Check number isn't null & isn't equal to filter text
            )
        )
        ) {
            if (ev == undefined)//if the collection doesn't already contain the card add it
                cardCollection.appendChild(childNode); //add the card
            else if (childNode.style.display == "none") //else if the span is hidden
                childNode.style.display = "block"; //unhide the span
        }
    };

    //if we've called this method ourselves
    if (ev == undefined)
        for (var i = 0; i < collection.categories.length; i++)
            for (var j = 0; j < collection.categories[i].cards.length; j++)
                //calls the above method to generate all the span object initially
                loop(collection.categories[i].cards[j]);
    else
        for (var i = 0; i < cardCollection.childElementCount; i++)
            //calls the above method to hide/unhide all span objects
            loop(cardCollection.childNodes[i]);
}

//updates what can visually be seen in the deck (left pane)
function UpdateShownDeck() {
    if (deck.length > 0)
        deck = backend.SortDeck();
    var holder = document.getElementById("DeckHolder");
    //removes all objects from the deck
    while (holder.childElementCount > 0) {
        holder.removeChild(holder.childNodes[0]);
    }

    //inits the deck size as 0
    var deckSize = 0;

    for (var i = 0; i < deck.length; i++) {
        deckSize += deck[i].amount;

        //----------------------------------------
        var div = document.createElement("div");
        div.style.paddingLeft = "0px";
        //----------------------------------------
        //| Creates a parent div to hold the span
        //----------------------------------------

        //----------------------------------------
        var navSpan = document.createElement("span");
        navSpan.classList.add("nav-group-item");
        navSpan.style.paddingLeft = "5px";
        navSpan.style.display = "inline-block";
        navSpan.object = deck[i];
        navSpan.type = "span";
        //----------------------------------------
        //| Creates a span to contain the card
        //|  inside the pane
        //----------------------------------------

        //----------------------------------------
        var span = document.createElement("span");
        span.style.cssFloat = "left";
        //----------------------------------------
        //| Creates the base span which will hold
        //|   all the DOM elements of the card
        //----------------------------------------

        //----------------------------------------
        var img = document.createElement("img");
        img.style.width = "10px";
        img.style.height = "10px";
        img.style.display = "inline";
        switch (deck[i].type) {
            case 1:
                img.src = "images/Monster/level_star.png";
                break;
            case 2:
                img.src = "images/Spell/spell.png";
                break;
            case 3:
                img.src = "images/Trap/trap.png";
                break;
        }
        //----------------------------------------
        //| Creates the accompanying icon to be
        //|  displayed next to the card name
        //----------------------------------------

        //----------------------------------------
        var p1 = document.createElement("p");
        p1.style.display = "inline";
        p1.innerText = `${deck[i].amount} x `;
        //----------------------------------------
        //| Creates a text object representing the
        //|  amount contained in the deck
        //----------------------------------------

        //----------------------------------------
        var p2 = document.createElement("p");
        p2.style.display = "inline";
        p2.innerText = `${deck[i].name}`;
        //----------------------------------------
        //| Creates a text object representing
        //|  the name of the card
        //----------------------------------------

        span.appendChild(img);
        span.appendChild(p1);
        span.appendChild(p2);

        navSpan.onclick = e => {
            //if the span was clicked
            if (e.target.type == "span") {
                //get the clicked span and pass the number (card passcode) to the <UpdateShownCard> function
                UpdateShownCard(collection.categories[e.currentTarget.object.type - 1].cards.find(o => o.number == e.currentTarget.object.number));
                //if the icon was clicked
            } else {
                //get the clicked span and pass the number (card passcode) to the <UpdateShownCard> function
                UpdateShownCard(collection.categories[e.currentTarget.object.type - 1].cards.find(o => o.number == e.currentTarget.object.number));
            }
        };

        navSpan.ondblclick = e => {
            //remove the card from the deck
            backend.RemoveCard(e.currentTarget.object.json, 1);
        };

        div.appendChild(span);
        navSpan.appendChild(div);
        holder.appendChild(navSpan);
    }

    //updates the text displayed by the pane
    document.getElementById("DeckHeader").innerText = `Deck - ${deckSize}`
}

//updates the card shown on the right
function UpdateShownCard(span) { //where span is an object created in <InitializeCardCollection>

    var obj = new objects.ParamObject();
    obj.jsonLocation = span.jsonLocation;
    obj.correctSubCats = true;
    obj.args = [span];

    var callback = function (json, span) {
        var image = document.getElementById("CardImage");
        var desc = document.getElementById("CardDescription");
        var number = document.getElementById("CardNumber");
        var monsterTypes = document.getElementById("CardMonsterTypes");
        var cardType = document.getElementById("CardType");
        var cardName = document.getElementById("CardName");

        image.src = json["image"];
        document.getElementById("CardImage").style.opacity = "1.0"; //image is initially at opacity 0 in html
        desc.innerHTML = json["description"];
        number.innerHTML = json["cardNumber"];
        monsterTypes.innerHTML = json["subCategories"].join(", ");
        cardType.innerHTML = extensions.GetCardType(json["cardType"]).toTitleCase(); //gets the string name of the card type, e.g 1 -> monster
        cardName.innerHTML = json["name"];
    };

    backend.LoadJsonFile(callback, obj);
}

module.exports = {
    UpdateShownCollection,
    UpdateShownDeck,
    UpdateShownCard
};